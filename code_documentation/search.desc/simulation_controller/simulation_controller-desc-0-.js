searchState.loadedDescShard("simulation_controller", 0, "Simulation controller for the dr_ones network simulator. …\nManages and controls the network simulation.\nEnum representing the types of network topologies …\nSends a request from the specified client to retrieve all …\nSends a chat message from the specified client to another …\nChecks whether a client with the specified node ID exists …\nChecks whether a server with the specified node ID exists …\nCommand Line Interface module for the simulation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the command channel for a client by its node ID, …\nRetrieves the command channel for a server by its node ID, …\nSends a client list request from the specified client to …\nReturns a reference to the drone event receiver channel, …\nSends a file request for the specified filename from the …\nSends a file list request from the specified client to the …\nReturns a reference to the current network topology …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSends a crash command to the drone with the given node ID …\nCreates a new <code>SimulationController</code> instance with the …\nNetwork configuration parser module. Handles parsing and …\nRegisters the specified client with the communication …\nReturns a function pointer that creates a specific drone …\nSends a server type request from the specified client to …\nUpdates the simulation controller’s client command …\nUpdates the simulation controller’s drone command …\nUpdates the simulation controller’s packet channels with …\nSets the packet drop rate for the specified drone.\nSets the event receiver channel for the simulation …\nSets the event sender channel for the simulation …\nSets the server type for the specified server.\nUpdates the simulation controller’s server command …\nSpawns a new drone in the simulation with the specified …\nStarts the simulation controller by initializing …\nStarts the simulation controller in interactive mode, …\nStarts the CLI interface for the simulation controller\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRuns the network simulator GUI asynchronously using the …\nError types for network configuration parsing.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParses a network configuration file and validates its …\nValidates the entire network configuration by checking all …")