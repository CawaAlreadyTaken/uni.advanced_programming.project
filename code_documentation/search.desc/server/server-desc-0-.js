searchState.loadedDescShard("server", 0, "Server implementation for the dr_ones network simulator.\nRepresents a server node that implements both the …\nIndicates that this node is not a client.\nReturns the argument unchanged.\nReturns the node identifier of the server.\nReturns a clone of the fragments that need to be NACKed …\nReturns a reference to the packet receiver.\nReturns a mutable reference to the map of packet senders.\nRetrieves the packet delivery ratio (PDR) estimation for a …\nReturns a clone of the map containing pending fragments.\nReturns a clone of the pending serializable messages.\nReturns a mutable reference to the server’s random …\nReturns a mutable reference to the set of flood …\nReturns a reference to the simulation controller sender.\nRetrieves the fragments associated with a given session. …\nReturns the current topology configuration, if available.\nHandles a chat message sent from one client to another. If …\nHandles a client list request by sending the list of …\nHandles an incoming network command and processes it based …\nHandles a file list request from a client. If the server …\nHandles a file request from a client. If the file is found …\nHandles a registration request from a client for a …\nHandles a routed packet by delegating to the host node’s …\nHandles a server type request from a client by sending the …\nCalls <code>U::from(self)</code>.\nCreates a new server instance with the specified …\nRemoves all fragments associated with a specific session.\nRuns the server’s main loop, handling simulation …\nSets the fragments that should be NACKed due to errors in …\nSets the packet delivery ratio (PDR) estimation for a …\nSets the map of pending fragments.\nSets the list of pending serializable messages.\nSets the fragments for a specific session.\nSets the topology configuration for the server.")